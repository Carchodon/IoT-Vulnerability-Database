##imports generales
import mysql.connector
from database import db
from modificador import mod
import numpy as np

##imports de reconocimineto
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem.porter import PorterStemmer
import re
import string

####imports de los clasificadores
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
##SVM
from sklearn.svm import LinearSVC


#####LEEMOS LA BASE DE DATOS#####
database = db()
db_cursor = database.conectar("tfm")

##creamos dataframe vacio
df=pd.DataFrame(columns =['id','score','description', 'part', 'vendor', 'devType'])
df2020=pd.DataFrame(columns =['id','score','description', 'part', 'vendor'])

##cargamos la tabla vulnerabilidades
modificador = mod()
df = modificador.get_dataframe_classified('vulnerabilidades')
df2020 = modificador.get_dataframe_not_classified('vulnerabilidades2020')

##Define X and y
X = df.iloc[:,2:-1]
y = df['devType']
##obtenemos los datos que queremos en forma de lista para el train
descripcionesTrain = X['description'].tolist()
partTrain = X['part'].tolist()
vendorTrain = X['vendor'].tolist()
##juntamos en una sola lista con los datos que queremos que se utilizen en el clasificador(descripcion, part y vendor)
iterator = 0
for i in range(1,len(descripcionesTrain)):
  descripcionesTrain[iterator] = descripcionesTrain[iterator]+" "+partTrain[iterator]+" "+vendorTrain[iterator]
  iterator+=1

##Asignaciones para que todo funcione correctamnete
y_train=y.to_numpy()
#yy_test=y_test.to_numpy()
y_train = y_train.astype(np.int64)
#yy_test = yy_test.astype(np.int64)

##Definir Pipeline con el clasificador que se quiera
text_clf = Pipeline([('vect', CountVectorizer()),
                     ('tfidf', TfidfTransformer()),
                     ('clf', LinearSVC()),
                     ])

##Fit
text_clf.fit(descripcionesTrain, y_train)

##obtenemos los datos que queremos en forma de lista para la clasificacion final
descripcionesTest = df2020['description'].tolist()
partTest = df2020['part'].tolist()
vendorTest = df2020['vendor'].tolist()
##juntamos en una sola lista con los datos que queremos que se utilizen en el clasificador(descripcion, part y vendor)
iterator = 0
for i in range(1,len(descripcionesTest)):
  descripcionesTest[iterator] = descripcionesTest[iterator]+" "+partTest[iterator]+" "+vendorTest[iterator]
  iterator+=1

##predict
predicted = text_clf.predict(descripcionesTest)
##Guardar la prediccion en un dataframe nuevo
df1 = pd.DataFrame(predicted)

##a√±adimos un caracter para poder diferenciar los que son de IoT y los que no lo son
df1[0] = df1[0].apply(lambda x: "n" if x == 0 else "y")
df2020["aux"] = df1[0]
df2020['aux'] = df2020['aux'].fillna("y")

## Subimos las que son de IoT a la tabla vulnerabilidadesIoT
for index, row in df2020.iterrows():
  if (row['aux']=="n"):
    escribir=False
  else:
    escribir=True
  if (escribir):
    sql_statement = "SELECT * FROM vulnerabilidades2020 WHERE id = '"+row['id']+"'"
    db_cursor.execute(sql_statement)
    output = db_cursor.fetchall()
    id = output[0][0]
    score = output[0][1]
    description=output[0][2]
    part = output[0][3]
    vendor = output[0][4]
    description = description.replace("'", "")
    vendor = vendor.replace("'","")
    print('vamos a insertar '+ id)
    sql_query = "INSERT INTO vulnerabilidadesIoT(id,cvss_score,description, part, vendor) VALUES('" + id + "', " + str(score) + ",'" +description + "','" +part+ "','" +vendor+"')"
    db_cursor.execute(sql_query)


##Commit
database.commit()